#!/usr/bin/env python2

from subprocess import check_output
import re
import sys


def main():
    if len(sys.argv) > 2:
        print(compile(sys.argv[1], optimize=True))
    else:
        print(cleanup(compile(sys.argv[1])))


def cleanup(assembly):
    dot_removes = [
        'file',
        'globl',
        'ident',
        'intel_syntax',
        'section',
        'size',
        'type',
    ]
    regexes = [
        (r'\t\.cfi_.*\n', ''),
        (r'QWORD PTR', 'qword'),
        (r'DWORD PTR', 'dword'),
        (r'WORD PTR', 'word'),
        (r'BYTE PTR', 'byte'),
    ] + [(r'\t\.%s.*\n' % x, '') for x in dot_removes]
    for regex, repl in regexes:
        assembly = re.sub(regex, repl, assembly)
    remove_one = [r'.LFB\d+', r'.LFE\d+']
    for r1 in remove_one:
        if re.findall(r1, assembly):
            assembly = re.sub(r'%s:\n' % r1, '', assembly)
    return assembly


def compile(file, optimize=False):
    args = [
        'gcc',
        '-S',
        '-std=c99',
        '-masm=intel',
        # Disable stack protector since it makes functions longer and so it
        # makes their essence more difficult to understand.
        '-fno-stack-protector',
        '-o', '-',
    ]
    if optimize:
        args.append('-O3')
    args.append(file)
    return check_output(args)


if __name__ == '__main__':
    main()
